#!/bin/bash

# This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v3 as published by the Free Software Foundation.
# It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with it. If not, see <https://www.gnu.org/licenses/>.

root="$HOME/Forge"
hist="$root/JOURNAL.md"
ignore="$XDG_CONFIG_HOME/journal/journal.ignore"

# Colors
reset=$(printf '\033[0m')
bold_blue=$(printf '\033[1;34m')
red=$(printf '\033[31m')
green=$(printf '\033[32m')
magenta=$(printf '\033[35m')
cyan=$(printf '\033[36m')
yellow=$(printf '\033[33m')
blue=$(printf '\033[34m')


printHelp() { # Show help if no valid argument is parsed
    echo -e "HELP:
    \e[1m'print'\e[0m print the tasks to stdout in plain text;
    \e[1m'show'\e[0m show the tasks in a pager with pretty formatting;
    \e[1m'fuzzy'\e[0m show tasks in fzf with note preview;
    \e[1m'commit'\e[0m clean done tasks and write them to journal." && exit
}

# rg uses [Rust RE](https://docs.rs/regex/1.3.9/regex/)

printTasks() { # $1=regex_rule
	if [ "$1" ]; then
		rg -N --color never --no-heading -t md --ignore-file "$ignore" -e "$1"
	else
		rg -n --color never --no-heading -t md --ignore-file "$ignore" -e "TODO: "
	fi | sed 's/TODO: //;s/\r//' # delete todo preffix and carriage return escape code
}

printReminders() {
    printTasks "^TODO:.*=[^ ].*$"
#    mapfile -t reminders < <(printTasks "^TODO:.*=[^ ].*$") # FIXME: Edit RE to also match template variables
    
#    for event in "${reminders[@]}"; do
#        eventREM=
#        eventMSG=
#    done
}

# TODO SYNTAX
# TODO: It's christmas! =20-12-25  
# TODO: Annualy every July 1. =07-01
# TODO: Monthly at first day. =01 *remind monthly at day 1* 
# TODO: Every monday =monday *remind weekly at monday*  

# REMIND SYNTAX
# REM December 25 2020 MSG It's christmas!
# REM Jul 1 MSG Annualy every July 1.
# REM 1 MSG msg Monthly at first day.
# REM Monday MSG msg Every monday.

prettify() {
	sed 's/:/\n/' | awk '!x[$0]++' | # split & dedup
	sed "s/^.*\.md$/\n${bold_blue}&${reset}/;s/\+done/${green}&${reset}/;s/\+asap/${red}&${reset}/;s/\+later/${magenta}&${reset}/;s/[=!?].[^ ]*/${cyan}&${reset}/;s/\!.[^ ]*/${cyan}&${reset}/;s/#.[^ ]*/${yellow}&${reset}/;s/@.[^ ]*/${blue}&${reset}/" # colorize	
} 

printPretty() {
	printTasks "^TODO:.*\+done.*$" | prettify
	printTasks "^TODO:.*\+asap.*$" | prettify
	printTasks "^TODO:.[^\+]*$" | prettify
	printTasks "^TODO:.*\+later.*$" | prettify
}

fuzzy() { # {1} is file name, {2} is line number and {3} is task description.
	printTasks | fzf --delimiter : --preview "journal-fzf preview {1} {2}" --preview-window=right:50%:wrap --bind "f1:execute($EDITOR {1}),f2:execute(xdg-open {1}),f3:reload(journal-fzf cycle {1} {2} {3} && journal-fzf print),f4:reload(journal-fzf delete {1} {2} && journal-fzf print)"
}

confirmDialog() {
	# shellcheck disable=SC2162 # it don't matter
	read -p "Are you sure? (y/N) " yn;
	case $yn in
		[Yy][Ee][Ss]|[Yy]) return 0;;
		[Nn][Oo]|[Nn]) return 1;;
		*) echo "Please answer yes or no." && return 1;;
	esac
}

commitDone() { # write tasks done to journal file
	echo -e "## $(date "+%d de %B de %Y Ã s %H:%M")"
	rg -N --color never --no-heading -t md --ignore-file "$ignore" -e "^TODO:.*\+done.*$" | sed 's/:/: /;s/\+done//' && echo -e ""
}

deleteDone() {	# delete tasks done from their files
	for i in $(rg -N -t md --ignore-file "$ignore" -e "^TODO:.*\+done.*$" | sed 's/:.*//' | awk '!x[$0]++'); do # iterate over files with tasks done
		sed -i '/\+done/d' "$i"
	done
}

commitGit() { # non-interactively git commit all changes in root dir
	last_commit="git -C '$root' log HEAD^..HEAD --pretty=format:'%s'"  
	today_commit=$(date "+%y-%m-%d") 
	git -C "$root" add -A && if [[ "$today_commit" == "$last_commit" ]]; then
		git -C "$root" commit --amend -m "$today_commit" # amend if not first commit in the day
	else
		git -C "$root" commit -m "$today_commit"
	fi
}

cd "$root" || exit

case $1 in
	print) printTasks;;
	show) printPretty | less -R;;
	fuzzy) fuzzy;;
    reminders) printReminders;;
	commit) confirmDialog && commitDone >> "$hist" && deleteDone && commitGit;;
    *) printHelp;;
esac

