#!/bin/sh
# Unitary tests for Journal
# We can't write unit tests for interactive behaviour interacting with external software.
# But we can compare commands strings for a range of inputs to see if they match with what we expect.

#-----#
# LIB #
#-----#
todoPath="."
logPath="./log"
export journalDebug="true"

reset='\e[0m'
#bold='\e[1m'
red='\e[1;31m'
green='\e[1;32m'

_report() {
    local name="$1"
    local status="$2"
    if [ "$status" -eq 0 ]; then
        printf "[${green}PASS${reset}]: %s\n" "$name"
    elif [ "$status" -eq 1 ]; then
        printf "[${green}FAIL${reset}]: %s\n" "$name"
    else
        printf "${red}ERROR: Wrong status code for %s.${reset}\n" "$name"
    fi
}

# ----- #
# TASKS #
# ----- #
if ! [ -d "$todoPath" ]; then
    printf "TODOs path is missing. Critical!\n"
    exit 1
else
    # shellcheck disable=SC2164
    cd "$todoPath"
fi

# PRINT
## expected
## actual
## pass?

# SHOW

# FIND

# COMMIT (later)

# --- #
# LOG #
# --- #
if ! [ -d "$logPath" ]; then
    printf "Logs path is missing. Critical!\n"
    exit 1
else
    # shellcheck disable=SC2164
    cd "$logPath"
fi

# WRITE (later)

# READ (later)

# ROTATE (later)
