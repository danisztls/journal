#!/bin/bash

# This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v3 as published by the Free Software Foundation.
# It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with it. If not, see <https://www.gnu.org/licenses/>.

#-------#
# DEBUG #
#-------#
# shellcheck disable=SC2154
if [ "$journalDebug" = "true" ]; then
    debug="true"
    # Command verbosity 
    # set -v

    # Exit if any command return a non-zero
    # put '||:' at the end of a pipe to mask a non-zero
    set -e

    # Exit when referencing an undefined variable
    # $* and $@ are exceptions
    #set -u

    # Exit if any command in a pipe fail
    set -o pipefail
else
    # shellcheck disable=SC2034
    debug="false"
fi

#--------#
# CONFIG #
#--------#
# Set defaults for testing/normal
# shellcheck disable=SC2154
if [ "$journalTesting" = "true" ]; then
    testing="true"
    todoPath="test"
    logPath="test/log"
else
    testing="false"
    todoPath="$HOME"
    logPath="$HOME/Docs/log"
fi

# Immutable defaults
retentionDaily="-7days" # leave the minus, unless you want to warp time
retentionMonthly="-3months"
[ -f "/usr/share/journal/ignore" ] && ignoreFile="/usr/share/journal/ignore"

# Load user configuration
configDir="${XDG_CONFIG_HOME:-"$HOME/.config"}/journal"
configFile="$configDir/config"
ignoreFile="$configDir/ignore"
if [ -f "$configFile" ] && ! [ "$testing" = "false" ]; then
    #shellcheck disable=SC1090
    source "$configFile"
fi

# Set escape code colors variables
# $'...' are escaped strings
reset=$'\e[0m'
bold=$'\e[1m'
dim=$'\e[2;20m'
red=$'\e[31m'
green=$'\e[32m'
magenta=$'\e[35m'
cyan=$'\e[36m'
yellow=$'\e[33m'
blue=$'\e[34m'

# Set editor
# Use $editor from config, otherwise, use $EDITOR, if defined, or whatever is available.
if ! [ "$editor" ]; then
    editors=(vi vim nvim nano)
    # shellcheck disable=SC2153
    if [ "$EDITOR" ]; then
        editor=$EDITOR
    else
        for prog in "${editors[@]}"; do
            if command -v "$prog" $>/dev/null; then
                # remove alias and path prefix
                editor=$(command -v "$prog" | sed 's/alias .*=//;s#.*/##')
            fi
        done
    fi
fi

#------#
# HELP #
#------#
# Show help if no valid argument is parsed
printHelp() {
    # shellcheck disable=SC2059
    printf "
TODOs:
    ${bold}'print'${reset} print plain text tasks to STDOUT;
    ${bold}'show'${reset} show tasks in a pager with pretty formatting, use '-a' to include all;
    ${bold}'find'${reset} fuzzy find tasks and preview file context;
    ${bold}'clean'${reset} clean done tasks within files and commit them to a journal.
     override path with ${bold}'-p <path>'${reset}, works for any mode;\n
LOG:
    ${bold}'write'${reset} create/edit entry, use ${bold}'-d'${reset} to do a daily review;
    ${bold}'read'${reset} fuzzy find entries and read content; 
    ${bold}'merge'${reset} merge entries in monthly and yearly entries following the retention policy.\n" && exit
}

#-------#
# UTILS #
#-------#
# Get arguments
_getopts() {
    while getopts "adp:" option; do
        # shellcheck disable=SC2220 # let getopts deal with input validation
        case $option in
            a) printAll="true";;
            d) dailyStandup="true";;
            p) todoPath="$OPTARG"
        esac
    done
}

_confirmDialog() {
# Sub procedure that asks for user confirmation
    # shellcheck disable=SC2162
	read -p "Are you sure? (y/N) " yn;
	case $yn in
		[Yy][Ee][Ss]|[Yy]) return 0;;
		[Nn][Oo]|[Nn]) return 1;;
		*) printf "Please answer yes or no.\n" && return 1;;
	esac
}

# Use 'trash' if available, otherwise 'rm'
# _gro is a short for getridof
# have to be a variable to work inside fzf
if command -v "trash" &>/dev/null; then
    _gro="trash" 
else
    _gro="rm"
fi

# Jump to line with Vim when opening and jump to given line (to use with fzf)
# if not vim or nvim it will be the same as $editor
# shellcheck disable=SC2001
editorJump2Line=$(sed "s/vim/vim {1} -c '{2} normal zz'/" <<< "$editor")

# Deduplicate lines
_dedup() { awk '!x[$0]++'; }

#-------#
# TASKS #
#-------#
# Functions with '_' preffix are akin to private functions.
# Although some of them are even being called externally.
# They should be understood as parent functions for tracing purposes.

_queryTodos() { 
# Find TODOs on files
# $1 is a [Rust RE](https://docs.rs/regex/1.3.9/regex/) rule
    local regexRule="${regexRule:-^TODO: }"
	rg -n --color never --no-heading -t md --ignore-file "$ignoreFile" -e "$regexRule"
}

printTodos() {
# Print plain TODOs to STDOUT
# As it prints to STDOUT, normal and debug mode are the same
    cd "$todoPath" || exit 1
    _queryTodos | sed 's/TODO: //;s/\r//' # delete todo prefix and carriage return escape code
}

_prettifyTodos() {
# Format and colorize plain-text TODOs from STDIN 
    sed "s/TODO: //;s/:/\n/" | # remove todo placeholder and split
    sed -E "s/^[0-9]*://" | # remove numbers
    _dedup | # remove duplicate file names 
	sed "s/^.*\.md$/\n${bold}${blue}&${reset}/;
        s/\+done/${green}&${reset}/;
        s/\+asap/${red}&${reset}/;
        s/\+later/${magenta}&${reset}/;
        s/[=!?].[^ ]*/${cyan}&${reset}/;
        s/\!.[^ ]*/${cyan}&${reset}/;
        s/#.[^ ]*/${yellow}&${reset}/;
        s/@.[^ ]*/${blue}&${reset}/" #colorize
}

showPrettyTodos() {
# Show pretty TODOs on a pager
    cd "$todoPath" || exit 1

    regexRules=("^TODO:.*\+done.*$" "^TODO:.*\+asap.*$" "^TODO:.[^\+]*$") 
    # only print if -a flag is set
    [ "$printAll" ] && regexRules+=("^TODO:.*\+later.*$")

    if [ "$testing" = true ]; then # if debug is on, print to STDOUT
        _show="cat"
    else
        _show="less -R"
    fi

    local regexRule
    for regexRule in "${regexRules[@]}"; do
    # FIXME: If query is empty it will return 1 and break the loop
        _queryTodos | _prettifyTodos
    done | $_show
}

_printDoneTodos() { 
# Print done TODOs to STDOUT
    local regexRule="^TODO:.*\+done.*$"
	printf "## %s\n" "$(date "+%d %^b %H%M")"
    _queryTodos |
    sed 's/TODO: //;s/:/: /;s/\+done//' # && echo -e ""
}

_deleteDoneTodos() {	
# Delete done TODOs within files
    local regexRule="^TODO:.*\+done.*$"
    local files && files=$(
        _queryTodos   | # find done todos
        sed 's/:.*//' | # extract files
        _dedup          # remove duplicates
    )
	for file in $files; do # iterate over files
		sed -i '/\^TODO: .*+done/d' "$file" # delete line with todo
	done
}

_commitGit() {
# Non-interactively commit changes in a Git repository
	local today lastCommit
	today=$(date "+%y-%m-%d") 
    lastCommit="git -C '$todoPath' log HEAD^..HEAD --pretty=format:'%s'" # find last commit
	git -C "$todoPath" add -A &&
    if [ "$today" = "$lastCommit" ]; then
		git -C "$todoPath" commit --amend -m "$today" # amend if not first commit in the day
	else
		git -C "$todoPath" commit -m "$today" # do not amend otherwise
	fi
}

# Clean all done TODOs withi files and commit them to a journaling file
cleanDoneTodos() {
    cd "$todoPath" || exit 1
    _confirmDialog && _printDoneTodos >> "journal.md" && _deleteDoneTodos && _commitGit
}

#-----#
# FZF #
#-----#
# $1 is function, $2 is file name, $3 is line number and $4 is task description in Fzf environment.
_fzfPrint() {
# Print TODOs for Fzf
# Between ':' should be, in order, file name, line number and task description.
    _queryTodos |
    sed -E "s/^(.*):([0-9]*):TODO: (.*)$/${magenta}\1${reset}:${dim}\2${reset}:\3/"
}

_fzfPreview() {
# Output a preview of the file with the selected line somewhat centered.
# Fzf env: $FZF_PREVIEW_LINES and $FZF_PREVIEW_COLUMNS is the size of the preview window.
    local file="$1"
    local line="$2"

    tresh=$(( FZF_PREVIEW_LINES / 2 )) # threshold
	start=$(( line - tresh )); [ $start -lt 1 ] && start=1 # failsafe
    end=$(( line + tresh )) # end line
	bat --color always -l md --highlight-line "$line" -r $start:$end -pp "$file" # wrapping is being done in Fzf now
}

_fzfCycle() {
# Cycle between task priorities
    local file="$1"
    local line="$2"
    local task="$3"
    # check if priority tag exists in tasks and append +asap if not
    if ! rg '\+(asap|done|later)' <<< "$task" >/dev/null; then
        sed -i -E "${line}s/^(.*)$/\1 \+asap/" "$file" && return 0
    fi

    # cycle between priority tags otherwise
    # don't refactor: it would be complex to iterate over two variables as multi-dimensional arrays aren't supported
    rg "\+asap"  <<< "$task" >/dev/null && sed -i "${line}s/\+asap/\+done/" "$file" && return 0
    rg "\+done"  <<< "$task" >/dev/null && sed -i "${line}s/\+done/\+later/" "$file" && return 0
    rg "\+later" <<< "$task" >/dev/null && sed -i "${line}s/\+later//" "$file" && return 0
}

_fzfDelete() {
    local file="$1"
    local line="$2"
	sed -i "${line}d" "$file"
}

fzfFind() {
# Invoke Ffz to fuzzy find and preview TODOs context
# {1} is file name, {2} is line number and {3} is task description.
    cd "$todoPath" || exit 1

    # Debug Mode
    if [ "$testing" = true ]; then
        _fzfPrint
    # Normal Mode
    else
        _fzfPrint |
        fzf --ansi --delimiter ':' \
            --preview "journal _fzfPreview {1} {2}" \
            --preview-window=right:50%:wrap \
            --header "f1 → default, f2 → editor, f3 → cycle priority, del → delete" \
            --layout=reverse \
            --bind "\
f1:execute-silent(xdg-open {1} 2>/dev/null),\
f2:execute($editorJump2Line),\
f3:reload(journal _fzfCycle {1} {2} {3} && journal _fzfPrint),\
del:reload(journal _fzfDelete {1} {2} && journal _fzfPrint)"
    fi
}

#-------#
# DIARY #
#-------#
[ -d "$logPath" ] || mkdir -p "$logPath" # create dir if not found

writeLog() {
# Create a log entry with present date/time and open it with $EDITOR
    cd "$logPath" || exit 1

    fileName="$(date '+%y-%m-%d').md"
    #fileName="$(date '+%y-%m-%dT-%H-%M').md" # +granularity on file name
    header="### $(date '+%H%M')"
    # insert daily stand-up if flag if found
    [ "$dailyStandup" ] && header+="
#### What did I accomplish yesterday/today?
#### What will I do today/tomorrow?
#### What obstacles are impeding my progress?
"
    if ! [[ -f $fileName ]]; then # write header to file
        printf "%s\n" "$header" >> "$fileName"
    else
        printf "\n%s\n" "$header" >> "$fileName" # insert line break if file exists
    fi
    $EDITOR "$fileName" # open file
}

readLog() {
# Invoke Fzf to fuzzy find and preview log entries
    cd "$logPath" || exit 1
    fd '^[0-9]{2}.*.md$' |
    fzf --tac --no-sort \
        --layout=reverse \
        --preview "bat --color always -pp --wrap character --terminal-width $(( $(tput cols) / 2 - 4)) -l md -r :500 {}" \
        --header "f1 → default, f2 → editor, del → delete" \
        --bind "f1:execute-silent(xdg-open {} 2>/dev/null),f2:execute($editor {}),del:reload($_gro {} && fd '^[0-9]{2}.*.md$')"
}

_rotateLog() {
# Rotate old entries
    local matchPattern="$1"
    local offsetB="$2" # B is before, eg. day substring is 0:8 (YY-MM-DD)
    local offsetA="$3" # A is after, eg. month substring is 0:5 (YY-MM)
    local dateRetention="$4"
    local dateFormat="$5"
    local entries
    mapfile -t entries < <(fd -t f -d 1 "$matchPattern")
    for entry in "${entries[@]}"; do
        if [[ ${entry:0:$offsetB} < $(date '+%y-%m-%d' -d "$dateRetention" ) ]]; then
            printf "Moved \e[31m%s\e[0m to \e[32m%s.md\e[0m\n" "$entry" "${entry:0:$offsetA}"
            {   printf "## %s\n" "$(date "$dateFormat" -d "${entry:0:$offsetB}")"
                printf "%s\n" "$(<"$entry")"
            } >> "${entry:0:$offsetA}.md"
            $_gro "$entry"
        fi
    done
}

mergeLogs() {
# Merge old entries to monthly and yearly entries
    cd "$logPath" || exit 1
    _rotateLog "^[0-9]{2}-[0-9]{2}-[0-9]{2}.*.md$" 8 5 "$retentionDaily" "+%d %^b" 
    _rotateLog "^[0-9]{2}-[0-9]{2}.md$" 5 2 "$retentionMonthly" "+%Y"
}

#------#
# MAIN #
#------#
# Get arguments
# getopts don't work when mixing parameters and arguments
# slice the parameters array to remove 1st parameter
_getopts "${@:2}"

# Run subprogram
case $1 in
	p|print) printTodos;;
	s|show) showPrettyTodos;;
    f|find) fzfFind;;
	c|clean) cleanDoneTodos;;
	w|write) writeLog;;
	r|read) readLog;;
	m|merge) mergeLogs;;
    _fzfPrint) _fzfPrint;;
	_fzfPreview) _fzfPreview "$2" "$3";;
	_fzfCycle) _fzfCycle "$2" "$3" "$4";;
	_fzfDelete) _fzfDelete "$2" "$3";;
    *) printHelp;;
esac
