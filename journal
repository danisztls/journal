#!/bin/bash

# This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v3 as published by the Free Software Foundation.
# It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with it. If not, see <https://www.gnu.org/licenses/>.

## CONFIG
# Set general defaults
todoPath="$HOME"
logPath="$HOME/Docs/log"
retentionDaily="-7days" # leave the minus, unless you want to warp time
retentionMonthly="-3months"
[ -f "/usr/share/journal/ignore" ] && ignoreFile="/usr/share/journal/ignore"

# Load user configuration
configDir="${XDG_CONFIG_HOME:-"$HOME/.config"}/journal"
configFile="$configDir/config"
ignoreFile="$configDir/ignore"
#shellcheck disable=SC1090
[ -f "$configFile" ] && source "$configFile"

# Set escape code colors variables
reset=$(printf '\e[0m')
gray=$(printf '\e[2;20m')
boldBlue=$(printf '\e[1;34m')
red=$(printf '\e[31m')
green=$(printf '\e[32m')
magenta=$(printf '\e[35m')
cyan=$(printf '\e[36m')
yellow=$(printf '\e[33m')
blue=$(printf '\e[34m')

# Testing mode
# Overrides conf for unit testing if $journalTesting=true
# shellcheck disable=SC2154
if [ "$journalTesting" ]; then
    todoPath="sample"
    logPath="sample/log"
    unset ignore
    if ! { [ -d "$todoPath" ] && [ -d "$logPath" ]; }; then
       echo "Expected dirs weren't found!" && exit 1 
    fi
fi

# Set editor
# Use $editor from config, otherwise, use $EDITOR, if defined, or whatever is available.
if ! [ "$editor" ]; then
    editors=(vi vim nvim nano)
    # shellcheck disable=SC2153
    if [ "$EDITOR" ]; then
        editor=$EDITOR
    else
        for prog in "${editors[@]}"; do
            if [ "$(command -v "$prog")" ]; then
                # remove alias and path prefix
                editor=$(command -v "$prog" | sed 's/alias .*=//;s#.*/##')
            fi
        done
    fi
fi

# Open vim and jump to given line (to use with fzf)
# shellcheck disable=SC2001
editorJump2Line=$(sed "s/vim/vim {1} -c '{2} normal zz'/" <<< "$editor")

## HELP ##
# Show help if no valid argument is parsed
printHelp() {
    echo -e "HELP:
    TODOs:
    \t\e[1m'print'\e[0m print todo tasks to stdout in plain text;
    \t\e[1m'show'\e[0m show tasks in a pager with pretty formatting, use -a to display parked tasks;
    \t\e[1m'find'\e[0m show tasks in fzf with note preview. f1 opens in editor, f2 cycles priority tags and f5 delete;
    \t\e[1m'commit'\e[0m write to journal and clean done tasks within files.;
    LOG:
    \t\e[1m'write'\e[0m create/edit log entry, use -d to do a daily review
    \t\e[1m'read'\e[0m fuzzy browse among entries; 
    \t\e[1m'rotate'\e[0m merge entries in monthly and yearly entries following the retention policy." && exit
}

## UTILS ##
_confirmDialog() {
# Subprocedure that asks for user confirmation
    # shellcheck disable=SC2162
	read -p "Are you sure? (y/N) " yn;
	case $yn in
		[Yy][Ee][Ss]|[Yy]) return 0;;
		[Nn][Oo]|[Nn]) return 1;;
		*) echo "Please answer yes or no." && return 1;;
	esac
}

# Use 'trash' if available, otherwise 'rm'
# _gro is a short for getridof
if [ "$(command -v trash)" ]; then
    _gro() { trash "$1"; } 
else
    _gro() { rm "$1"; }
fi

## TASKS ##
cd "$todoPath" || exit 1
[ -d "$logPath" ] || mkdir -p "$logPath"

printTodos() { 
# Find TODOs on files and send as plain-text to STDOUT
# $1 is a [Rust RE](https://docs.rs/regex/1.3.9/regex/) rule
    reString="${1:-TODO: }"
	rg -N --color never --no-heading -t md --ignore-file "$ignoreFile" -e "$reString" |
    sed 's/TODO: //;s/\r//' # delete todo preffix and carriage return escape code
}

_prettifyTodos() {
# Format and colorize plain-text TODOs from STDIN 
	sed 's/:/\n/' | awk '!x[$0]++' | # split & dedup
	sed "s/^.*\.md$/\n${boldBlue}&${reset}/;
        s/\+done/${green}&${reset}/;
        s/\+asap/${red}&${reset}/;
        s/\+later/${magenta}&${reset}/;
        s/[=!?].[^ ]*/${cyan}&${reset}/;
        s/\!.[^ ]*/${cyan}&${reset}/;
        s/#.[^ ]*/${yellow}&${reset}/;
        s/@.[^ ]*/${blue}&${reset}/" #colorize
}

printPrettyTodos() {
# Print pretty TODOs to STDOUT to browse with a pager
    while getopts ":a" option; do
      case $option in
        a) local printAll=True ;;
        ?) echo "Error: option -$OPTARG is not implemented";;
      esac
    done

	printTodos "^TODO:.*\+done.*$"  | _prettifyTodos
	printTodos "^TODO:.*\+asap.*$"  | _prettifyTodos
	printTodos "^TODO:.[^\+]*$"     | _prettifyTodos
    [ $printAll ] && # only print if -a flag is set
    printTodos "^TODO:.*\+later.*$" | _prettifyTodos
}

_printDoneTodos() { 
#  Print done TODOs to STDOUT
	echo -e "## $(date "+%d de %B de %Y às %H:%M")"
	rg -N --color never --no-heading -t md --ignore-file "$ignoreFile" -e "^TODO:.*\+done.*$" |
    sed 's/:/: /;s/\+done//' && echo -e ""
}

_deleteDoneTodos() {	
# Delete done TODOs within files
    local files && files=$(
        rg -N -t md --ignore-file "$ignoreFile" -e "^TODO:.*\+done.*$" | # find done todos
        sed 's/:.*//' | # extract files
        awk '!x[$0]++' # remove duplicates
    )
	for file in $files; do # iterate over files
		sed -i '/\+done/d' "$file" # delete line with todo
	done
}

_commitGit() {
# Non-interactively commit changes in a Git repo
	local lastCommit="git -C '$todoPath' log HEAD^..HEAD --pretty=format:'%s'" # find last commit
	local today && today=$(date "+%y-%m-%d") 
	git -C "$todoPath" add -A &&
    if [ "$today" = "$lastCommit" ]; then
		git -C "$todoPath" commit --amend -m "$today" # amend if not first commit in the day
	else
		git -C "$todoPath" commit -m "$today" # do not amend otherwise
	fi
}

# Commit all done TODOs to a journaling
commitDoneTodos() {
    _confirmDialog && _printDoneTodos >> "journal.md" && _deleteDoneTodos && _commitGit
}

# FZF
# FZF env: $1 is function, $2 is file name, $3 is line number and $4 is task description.
fzfPrint() {
# Print TODOs for fzf
    printTodos |
    sed -E "s/(.*):([0-9]*):(.*)/${magenta}\1${reset}:${gray}\2${reset}:\3/"
}

fzfFind() {
# Invoke FZF to fuzzy find and preview TODOs context
# {1} is file name, {2} is line number and {3} is task description.
# TODO: Abstract fzfFind() and readLog()
    fzfPrint |
    fzf --ansi --delimiter ':' \
        --preview "journal fzf-preview {1} {2}" \
        --preview-window=right:50%:wrap \
        --header "f1 → default, f2 → editor, f3 → cycle priority, del → delete" \
        --layout=reverse \
        --bind \
"f1:execute-silent(xdg-open {1} 2>/dev/null),\
f2:execute($editorJump2Line),\
f3:reload(journal fzf-cycle {1} {2} {3} && journal fzf-print),\
del:reload(journal fzf-delete {1} {2} && journal fzf-print)"
}

fzfPreview() {
# Output a preview of the file with the selected line somewhat centered.
# FZF env: $FZF_PREVIEW_LINES and $FZF_PREVIEW_COLUMNS is the size of the preview window.
    local file="$1"
    local line="$2"

    t=$(( FZF_PREVIEW_LINES / 2 )) # threshold
	s=$(( line - t )) && [ $s -lt 1 ] && s=1 # start line w/ failsafe
	e=$(( line + t )) # end line
	bat --color always -l md --highlight-line "$line" -r $s:$e -pp "$file" # wraping is being done in fzf now
}

fzfCycle() {
# Cycle between task priorities
    local file="$1"
    local line="$2"
    local task="$3"
    # check if priority tag exists in tasks and append +asap if not
    if ! rg '\+(asap|done|later)' <<< "$task" >/dev/null; then
        sed -i -E "${line}s/^(.*)$/\1 \+asap/" "$file" && return 0
    fi

    # cycle between priority tags otherwise
    rg "\+asap"  <<< "$task" >/dev/null && sed -i "${line}s/\+asap/\+done/" "$file" && return 0
    rg "\+done"  <<< "$task" >/dev/null && sed -i "${line}s/\+done/\+later/" "$file" && return 0
    rg "\+later" <<< "$task" >/dev/null && sed -i "${line}s/\+later//" "$file" && return 0
}

fzfDelete() {
    local file="$1"
    local line="$2"
	sed -i "${line}d" "$file"
}

## JOURNALING ##
writeLog() {
# Create a log entry with present date/time and open it with $EDITOR
    while getopts ":d" option; do
      case $option in
        d) dailyStandup=true ;;
        ?) echo "Error, wrong argument.";;
      esac
    done

    cd "$logPath" || exit 1

    fileName="$(date '+%y-%m-%d').md"
    #fileName="$(date '+%y-%m-%dT-%H-%M').md" # +granularity on file name
    
    header="### $(date '+%H:%M')"
    # insert daily standup if flag if found
    set +u; [ $dailyStandup ] && header+="
#### What did I accomplish yesterday?
#### What will I do today?
#### What obstacles are impeding my progress?
"; set -u

    if ! [[ -f $fileName ]]; then # write header to file
        printf "%s\n" "$header" >> "$fileName"
    else
        printf "\n%s\n" "$header" >> "$fileName" # insert line break if file exists
    fi
    $EDITOR "$fileName" # open file
}

readLog() {
# Invoke FZF to fuzzy find and preview log entries
    cd "$logPath" || exit 1
    fd '^[0-9]{2}.*.md$' |
    fzf --tac --no-sort \
        --layout=reverse \
        --preview "bat --color always -pp --wrap character --terminal-width $(( $(tput cols) / 2 - 4)) -l md -r :500 {}" \
        --header "f1 → default, f2 → editor, del → delete" \
        --bind "f1:execute-silent(xdg-open {} 2>/dev/null),f2:execute($editor {}),del:reload(_gro {} && fd '^[0-9]{2}.*.md$')"
}

_rotateLog() {
# Rotate old entries
    local matchPattern="$1"
    local offsetB="$2" # B is before, eg. day substring is 0:8 (YY-MM-DD)
    local offsetA="$3" # A is after, eg. month substring is 0:5 (YY-MM)
    local dateRetention="$4"
    local dateFormat="$5"
    local entries
    mapfile -t entries < <(fd -t f -d 1 "$matchPattern")
    for entry in "${entries[@]}"; do
        if [[ ${entry:0:$offsetB} < $(date '+%y-%m-%d' -d "$dateRetention" ) ]]; then
            printf "Moved \e[31m%s\e[0m to \e[32m%s.md\e[0m\n" "$entry" "${entry:0:$offsetA}"
            {   printf "## %s\n" "$(date "$dateFormat" -d "${entry:0:$offsetB}")"
                printf "%s\n" "$(<"$entry")"
            } >> "${entry:0:$offsetA}.md"
            _gro "$entry"
        fi
    done
}

rotateLogs() {
# Rotate old entries to monthly and yearly entries
    cd "$logPath" || exit 1
    _rotateLog "^[0-9]{2}-[0-9]{2}-[0-9]{2}T.*.md$" 8 5 "$retentionDaily" "+%B %d, %A" 
    _rotateLog "^[0-9]{2}-[0-9]{2}.md$" 5 2 "$retentionMonthly" "+%Y"
}

## SWITCHES ##
case $1 in
	print) printTodos;;
	show) printPrettyTodos "${@:2}" | less -R;;
    find) fzfFind;;
	commit) commitDoneTodos;;
	write) writeLog "${@:2}";;
	read) readLog;;
	rotate) rotateLogs;;
    fzf-print) fzfPrint;;
	fzf-preview) fzfPreview "$2" "$3";;
	fzf-cycle) fzfCycle "$2" "$3" "$4";;
	fzf-delete) fzfDelete "$2" "$3";;
    *) printHelp;;
esac
