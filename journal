#!/bin/bash

# This is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v3 as published by the Free Software Foundation.
# It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with it. If not, see <https://www.gnu.org/licenses/>.

## CONFIG ##
# General defaults
root="$HOME/Docs"
ignore="$XDG_CONFIG_HOME/journal/ignore"
daily=$(date '+%y-%m-%d' -d "-7days") # retention target for daily entries
monthly=$(date '+%y-%m-%d' -d "-3months") # retention target for monthly entries

# Colors defaults
reset=$(printf '\033[0m')
bold_blue=$(printf '\033[1;34m')
red=$(printf '\033[31m')
green=$(printf '\033[32m')
magenta=$(printf '\033[35m')
cyan=$(printf '\033[36m')
yellow=$(printf '\033[33m')
blue=$(printf '\033[34m')

# Load user configuration
config_file="$HOME/.config/journal/config"
[ -f "$config_file" ] && source "$config_file"

## HELP ##
# Show help if no valid argument is parsed
printHelp() {
    echo -e "HELP:
    TODOs:
    \t\e[1m'print'\e[0m print todo tasks to stdout in plain text;
    \t\e[1m'show'\e[0m show TODOs in a pager with pretty formatting;
    \t\e[1m'find'\e[0m show TODOs in fzf with note preview;
    \t\e[1m'plan'\e[0m export TODOs to a backlog file for task execution planning;
    \t\e[1m'commit'\e[0m write to journal and clean done TODOs within files.;
    LOG:
    \t\e[1m'write'\e[0m create/edit log entry;
    \t\e[1m'read'\e[0m fuzzy browse among entries; 
    \t\e[1m'rotate'\e[0m merge entries in monthly and yearly entries following the retention policy." && exit
}

## UTILS ##
# Subprocedure that asks for user confirmation
confirmDialog() {
	# shellcheck disable=SC2162 # it don't matter
	read -p "Are you sure? (y/N) " yn;
	case $yn in
		[Yy][Ee][Ss]|[Yy]) return 0;;
		[Nn][Oo]|[Nn]) return 1;;
		*) echo "Please answer yes or no." && return 1;;
	esac
}

## TODOs ##
cd "$root" || exit 1
[ -d "$root/log" ] || mkdir -p "$root/log"

# Find TODOs on files and send as plain-text to STDOUT
# $1 is a [Rust RE](https://docs.rs/regex/1.3.9/regex/) rule
printTodos() { 
	if [ "$1" ]; then
		rg -N --color never --no-heading -t md --ignore-file "$ignore" -e "$1"
	else
		rg -n --color never --no-heading -t md --ignore-file "$ignore" -e "TODO: "
	fi | sed 's/TODO: //;s/\r//' # delete todo preffix and carriage return escape code
}

# Format and colorize plain-text TODOs from STDIN 
prettifyTodos() {
	sed 's/:/\n/' | awk '!x[$0]++' | # split & dedup
	sed "s/^.*\.md$/\n${bold_blue}&${reset}/;s/\+done/${green}&${reset}/;s/\+asap/${red}&${reset}/;s/\+later/${magenta}&${reset}/;s/[=!?].[^ ]*/${cyan}&${reset}/;s/\!.[^ ]*/${cyan}&${reset}/;s/#.[^ ]*/${yellow}&${reset}/;s/@.[^ ]*/${blue}&${reset}/" #colorize
}

# Print pretty TODOs to STDOUT to browse with a pager
printPrettyTodos() {
	printTodos "^TODO:.*\+done.*$" | prettifyTodos
	printTodos "^TODO:.*\+asap.*$" | prettifyTodos
	printTodos "^TODO:.[^\+]*$" | prettifyTodos
	printTodos "^TODO:.*\+later.*$" | prettifyTodos
}

# Invoke FZF to fuzzy find and preview TODOs context
# {1} is file name, {2} is line number and {3} is task description.
findTodos() {
	printTodos | fzf --delimiter : --preview "jfzf preview {1} {2}" --preview-window=right:50%:wrap --bind "f1:execute($EDITOR {1}),f2:execute(xdg-open {1}),f3:reload(jfzf cycle {1} {2} {3} && jfzf print),f4:reload(jfzf delete {1} {2} && jfzf print)"
}

# Export TODOs to a backlog file for priority order and scheduling.
planTodos() {
    [ -f "log/backlog.md" ] && mv "log/backlog.md" "log/backlog-old.md"
    printTodos > "log/backlog.md"
    $EDITOR "log/backlog.md"
}

#  Print done TODOs to STDOUT
printDoneTodos() { 
	echo -e "## $(date "+%d de %B de %Y Ã s %H:%M")"
	rg -N --color never --no-heading -t md --ignore-file "$ignore" -e "^TODO:.*\+done.*$" | sed 's/:/: /;s/\+done//' && echo -e ""
}

# Delete done TODOs within files
deleteDoneTodos() {	
	for i in $(rg -N -t md --ignore-file "$ignore" -e "^TODO:.*\+done.*$" | sed 's/:.*//' | awk '!x[$0]++'); do # iterate over files with done TODOs
		sed -i '/\+done/d' "$i"
	done
}

# Non-interactively commit changes in a Git repo
commitGit() {
	last_commit="git -C '$root' log HEAD^..HEAD --pretty=format:'%s'"  
	today_commit=$(date "+%y-%m-%d") 
	git -C "$root" add -A && if [[ "$today_commit" == "$last_commit" ]]; then
		git -C "$root" commit --amend -m "$today_commit" # amend if not first commit in the day
	else
		git -C "$root" commit -m "$today_commit"
	fi
}

# Commit all done TODOs to a journaling
commitDoneTodos() {
    confirmDialog && printDoneTodos >> "journal.md" && deleteDoneTodos && commitGit
}

# LOG
# Create a log entry with present date/time and open it with $EDITOR
writeLog() {
    cd "$root/log" || exit 1
    now="$(date '+%y-%m-%dT-%H-%M').md"
    echo -e "### $(date '+%H:%M')\n" >> "$now"
	$EDITOR "$now" 
}

# Invoke FZF to fuzzy find and preview log entries
readLog() {
    cd "$root/log" || exit 1
    fd '^[0-9]{2}.*.md$' | fzf --tac --no-sort --preview "bat --color always -pp --wrap character --terminal-width $(( $(tput cols) / 2 - 4)) -l md -r :500 {}"
}

# Rotate old entries to monthly/yearly entries
rotateLog() {
    cd "$root/log" || exit 1
    mapfile -t daily_entries < <(fd '^[0-9]{2}-[0-9]{2}-[0-9]{2}.*.md$')
	for entry in "${daily_entries[@]}"; do
		if [[ ${entry:0:8} < $daily ]]; then
			echo -e "Moved \e[31m$entry\e[0m to \e[32m${entry:0:5}.md\e[0m"
			{ 	echo -e "## $(date '+%B %d, %A' -d "${entry:0:8}")"
				cat "$entry" && echo -e "\n"
			} >> "${entry:0:5}.md"
			rm "$entry"
		fi
	done

    mapfile -t monthly_entries < <(fd '^[0-9]{2}-[0-9]{2}.md$')
	for entry in "${monthly_entries[@]}"; do
		if [[ ${entry:0:5} < $monthly ]]; then
			echo -e "Moved \e[31m$entry\e[0m to \e[32m${entry:0:2}.md\e[0m"
			{ 	echo -e "# $(date '+%Y' -d "${entry:0:5}")"
				cat "$entry" && echo -e "\n"
			} >> "${entry:0:2}.md"
			rm "$entry"
		fi
	done	
}

# Switches
case $1 in
	print) printTodos;;
	show) printPrettyTodos | less -R;;
    find) findTodos;;
    plan) planTodos;;
	commit) commitDoneTodos;;
	write) writeLog;;
	read) readLog;;
	rotate) rotateLog;;
    *) printHelp;;
esac

